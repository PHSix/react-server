{"author":"PHSix","id":13,"title":"LightTree重构构思","created_at":"2021-07-20T14:47:48Z","body":["> light-tree是我正在写的一个neovim的文件树插件，使用了neovim的remote plugin机制编写的，项目地址：[light-tree.nvim](https://github.com/phsix/light-tree.nvim)\r\n## 之前版本的light-tree存在的问题。\r\n1. 没有使用面向对象的思想，每一次更新视图都是在重新遍历整个树结构。\r\n2. 文件树的节点存储方式不合理，导致想要选择性渲染某一层的节点而不影响下一级节点十分困难。\r\n3. 使数组的文件树结构带来的问题是当数组过长时渲染慢。\r\n4. 在程序编程过程中没有做到合理的解构，导致一旦出现问题修复十分麻烦也很难找出问题所在。","## 暂时确定下来的重构后的light-tree使用的文件树\r\n1. 树节点使用类的方式来实现，每一个节点的类型为VNode，VNode是一个FileNode类型或者是FolderNode，对应着系统里面的文件和文件夹。\r\n2. 使用dfs和来更新视图。\r\n3. 做一个插件的option和store(全局数据状态管理)来存储用户配置和当前文件树状态(节点和当前路径信息，buffer等)，再使用一个LinesCache来存储当前文件树的内容。\r\n4. 利用js里面高性能的instanceof来判断文件节点的类型。\r\n5. 尝试自己写一个remote机制(利用neovim里面的job来实现)，不依赖neovim自带的remote plugin机制，更加灵活。","## 基本开发完成的追加\r\n现在lightree项目已经被我删了，切换到了一个新的项目，因为我不希望的项目里面会有很多老旧的、错误的历史代码，所以我就开了个新的项目\r\n项目地址：[node-tree.nvim](https://github.com/phsix/node-tree.nvim)\r\n\r\n已完成的任务：\r\n1. 基本的编辑，展开，关闭\r\n2. 创建，删除，重命名文件\r\n3. 使用的rpc，没有直接利用neovim提供的remote plugin（因为remote plugin实在是太慢了qaq）"]}