{"author":"PHSix","id":11,"title":"使用原生javascript和css合作来写一个展开收起的列表","created_at":"2021-06-13T12:10:08Z","body":["这个想法的出现已经是很久之前了，早在一开始学习vue的时候就有在思考过怎么写出一个类似这样的一个组件效果\r\n![Peek 2021-06-13 20-05](https://user-images.githubusercontent.com/57695072/121806562-ed101100-cc82-11eb-8466-c0871ad5726c.gif)\r\n这是element ui里面的一个组件效果，但是我尝试过使用element ui开进行开发，但是使用了一下后感觉想element ui等这种定制化的ui库并不适合我，自己不是css的老手，但是对整个界面的UI又有自己的一份偏执，同时element ui是真的用不明白，所以就放弃定制化组件库。","第一步先来理一下大体的思路\r\n\r\n## 1. 展开的动画是通过怎样实现出来的\r\n\r\n这里我们可以先使用纯css来模拟一下\r\n1 .利用css可以设置正常样式和hover样式的特点，可以把默认列表展开写当鼠标悬停在兄弟节点上时列表节点展开\r\n2. 展开和收起目前知道的有几种做法\r\n     1. 设置display属性，当鼠标不知上面兄弟节点上的时候列表的display设置成none，当鼠标悬停在上面之后设置成block\r\n     2. 设置列表的height，当鼠标不知上面兄弟节点上的时候列表的height设置成0，当鼠标悬停在上面之后设置成固定的高度\r\n     3. 同样是设置列表的height，但是我们设置给height的值是一个百分比的值，为100%\r\n\r\n具体代码(使用了display的属性)：\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"zh-CN\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n    <style>\r\n      .second-level-menu {\r\n        display: none;\r\n        overflow: hidden;\r\n      }\r\n      .first-level-menu:hover ~ .second-level-menu {\r\n        display: block;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <div class=\"first-level-menu\">一级菜单</div>\r\n    <ul class=\"second-level-menu\">\r\n      <li>二级菜单-1</li>\r\n      <li>二级菜单-2</li>\r\n      <li>二级菜单-3</li>\r\n    </ul>\r\n  </body>\r\n</html>\r\n```\r\n实现的效果：\r\n![Peek 2021-06-14 17-49](https://user-images.githubusercontent.com/57695072/121873698-3753c980-cd39-11eb-845b-1be7db44cfb6.gif)\r\n","## 2. 使用js来使得点击切换效果\r\n\r\n这个地方需要用到js dom操作的知识\r\n\r\n一个是获取dom -> documtn.getElementBy____ ，在这里可以使用ClassName或者ID，也可以直接使用Tag，但是一般不推荐\r\n\r\n获取dom节点的时候推荐使用`getComputedStyle`方法而不是采用`node.style`来访问，因为刚开始获取到的style里面的每一个属性都是空的\r\n\r\n```javascript\r\n<!DOCTYPE html>\r\n<html lang=\"zh-CN\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n    <style>\r\n      .first-level-menu {\r\n        user-select: none;\r\n      }\r\n      .second-level-menu {\r\n        overflow: hidden;\r\n        user-select: none;\r\n        display: none;\r\n      }\r\n    </style>\r\n    <script>\r\n      function changeNodeStatus() {\r\n        const node = document.getElementsByClassName(\"second-level-menu\")[0];\r\n        if (getComputedStyle(node).display === \"none\") {\r\n          node.style.display = \"block\";\r\n        } else {\r\n          node.style.display = \"none\";\r\n        }\r\n      }\r\n    </script>\r\n  </head>\r\n  <body>\r\n    <div class=\"first-level-menu\" onclick=\"changeNodeStatus()\">一级菜单</div>\r\n    <ul class=\"second-level-menu\">\r\n      <li>二级菜单-1</li>\r\n      <li>二级菜单-2</li>\r\n      <li>二级菜单-3</li>\r\n    </ul>\r\n  </body>\r\n</html>\r\n\r\n```\r\n![1](https://user-images.githubusercontent.com/57695072/122391804-e1378e00-cfa5-11eb-88ec-87a58cb69252.gif)","## 3. 实现动画过度\r\n在动画过度上其实有多种解决方案，比如在前两步该成设置height的方法，然后使用js的for循环来做，这种方法在jquery里面也有相应的slideUp方法来实现，但是我们这里是使用原生的js和css所以我们就不采用jquery的这种方法了，而是采用css的transition\r\n\r\n在这里有一个问题，在MDN官网上查到的css里面可以实现动画的样式里面没有display，也就是意味着我们前面使用的那种display的方式是不可行的，要使用height属性来实现\r\n\r\n所以我们这里的代码可以改成：\r\n```javascript\r\n<!DOCTYPE html>\r\n<html lang=\"zh-CN\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n    <style>\r\n       body{\r\n        border: solid 1px black;\r\n      }\r\n      .first-level-menu {\r\n        user-select: none;\r\n      }\r\n      .second-level-menu {\r\n        overflow: hidden;\r\n        user-select: none;\r\n        height: 0;\r\n        transition: height 1s;\r\n      }\r\n    </style>\r\n    <script>\r\n      function changeNodeStatus() {\r\n        const node = document.getElementsByClassName(\"second-level-menu\")[0];\r\n        height = getComputedStyle(node.children[0]).height;\r\n        height = height.substring(0, height.length - 2);\r\n        // 获取子dom节点的数量来获得列表的高度\r\n        height = height * node.children.length;\r\n        if (getComputedStyle(node).height === \"0px\") {\r\n          node.style.height = height + \"px\";\r\n        } else {\r\n          node.style.height = \"0\";\r\n        }\r\n      }\r\n    </script>\r\n  </head>\r\n  <body>\r\n    <div class=\"first-level-menu\" onclick=\"changeNodeStatus()\">一级菜单</div>\r\n    <ul class=\"second-level-menu\">\r\n      <li>二级菜单-1</li>\r\n      <li>二级菜单-2</li>\r\n      <li>二级菜单-3</li>\r\n    </ul>\r\n  </body>\r\n</html>\r\n```\r\n最后实现的效果：\r\n![最后效果](https://user-images.githubusercontent.com/57695072/122396132-455c5100-cfaa-11eb-9455-28731900cb13.gif)\r\n\r\n-[MDN上面的CSS animated properties](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties)"]}