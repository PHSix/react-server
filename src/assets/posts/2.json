{
  "author": "PHSix",
  "id": 2,
  "title": "js中的数组",
  "created_at": "2021-02-21T06:16:29Z",
  "body": [
    "在js中我们很经常要使用到数组这个东西，因为在操作dom获取的对象时候一般都是获取到一个列表，也就是数组，同时在js中关于数组的操作有非常的多而且杂。\r\n\r\n在js中对于数组的操作大致可以分为几类：`数组创建`、`解构修改`, `遍历`\r\n\r\n## 数组创建\r\n\r\njs里面创建数组的方式有很多种：\r\n```javascript\r\nconst arr = []\r\n\r\nconst arr = Array.of(1, 2, 3)\r\n\r\nconst arr = Array.from()\r\n\r\n```\r\n\r\n同时因为js中数组是引用类型，所以js的数组可以直接用const定义，因为每次改变数组没有改变引用的地址\r\n\r\n\r\n## 解构修改\r\n解构修改主要是针对js对数组的一些合并、拆开、展开的处理\r\n\r\n主要涉及的操作内容有：\r\n\r\n```javascript\r\n// 展开\r\nconst arr = [1, 2, 3]\r\n\r\nconsole.log(...arr)\r\n// console:\r\n// 1  2  3\r\n// end\r\n\r\n// 数组合并\r\n\r\nconst arr = [1,2,3]\r\n\r\nconsole.log([4,5,...arr])\r\n\r\n// console:\r\n// 4, 5, 1, 2, 3\r\n// end\r\n\r\n// 解构\r\nlet [name, age] = ['xiaoming', 18]\r\nconsole.log(name + \": \" +age)\r\n\r\n// console:\r\n// xiaoming: 18\r\n// end\r\n// 同时也可以使用 let [, age] = ['xiaoming', 18]\r\n\r\n\r\n```\r\njs中同样提供了很多来操作数组的方法\r\n\r\n```javascript\r\n\r\nconst arr = [1,2,3]\r\nconst str = \"1,2,3,4\"\r\n\r\narr.pop()   //把数组当成一个栈，进行出栈操作\r\narr.push(3)  // 压栈\r\narr.shift() // 在数组前面取出\r\narr.unshift(1) // 在数组前面添加\r\narr.slice(1,2) // 截取片段\r\narr.splice() // 删除片段\r\narr.join(\", \") // 连接成字符串\r\nstr.split(\",\") // 字符串拆分成数组\r\nArray.concat(arr, str.split(\",\")) // 连接数组\r\n\r\n// 数组翻转、排序\r\narr.reverse()\r\narr.sort((value1, value2) => {\r\n  return value2 - value1\r\n})\r\n```\r\n其中`concat`方法同样可以通过展开语法来实现：\r\n```javascript\r\nconsole.log([...arr, ...str.split(\",\")])\r\n```\r\n\r\n## 遍历\r\n\r\n在js中提供了很多的数组遍历方法，数组遍历方法很多时候都是使用箭头函数来进行操作，这样的操作方式更加高级，但是同时语法相对于写多了后端语言的来说语法是诡异的\r\n\r\n遍历的箭头函数使用的几个参数变量是`value`, `index`, `array`\r\n\r\n```javascript\r\n// map 和 forEach\r\n// map会返回一个新的数组而forEach不会\r\n\r\nconst arr = [1,2,3]\r\narr.map((item) => {\r\n  console.log(item)\r\n})\r\n\r\narr.forEach((value, index, list) => {\r\n  console.log(value + index)\r\n})\r\n\r\n// 还有 for/in 和 for/of 组合\r\n// for/in 取到的是数组的索引，而for/of是取得数组的值\r\n\r\n// 利用遍历查找的方法\r\n// 返回索引\r\nconst arr = [2,1,3,1]\r\narr.indexOf(1)\r\narr.lastIndexOf(1)\r\n\r\narr.find((item) => {\r\n  return item === 1\r\n})\r\n\r\narr.findIndex((item) => {\r\n  return item === 1\r\n})\r\n\r\n// 返回一个布尔值\r\narr.includes(1)\r\n\r\n\r\n\r\n```\r\n"
  ]
}
