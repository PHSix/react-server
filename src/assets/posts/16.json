{"author":"PHSix","id":16,"title":"动手读vue源码","created_at":"2021-09-09T13:49:44Z","body":["> 目标：争取本学期跟着别人的博客把vue的源码读一遍\r\n\r\n博客资料来源[blogs](https://github.com/muwoo/blogs)","1. 什么是javascript的defineProperty？\r\n\r\n根据 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) 给的资料显示\r\n> Object.defineProperty() 方法会直接在一个**对象**上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。\r\n\r\n也就是说defineProperty的作用和它的名字一样，是起到代理的访问变量的作用，使得我们不直接到访问变量\r\n\r\n在Vue中主要使用defineProperty来设置变量的setter和getter来实现响应式\r\n\r\n如：\r\n```javascript\r\nconst data = {};\r\nlet value = 42;\r\nObject.defineProperty(data,\"value\", {\r\n  get: function () {\r\n    console.log(\"get data: \" + value)\r\n    return value;\r\n  },\r\n  set: function(a) {\r\n    console.log(`set data to : ${value}`)\r\n    value = a\r\n  },\r\n});\r\n\r\nconsole.log( \"console log data:\"+ data.value)\r\ndata.value = 2;\r\nconsole.log( \"console log data again:\" + data.value)\r\nconsole.log('orginal data: '  + value)\r\n```\r\n\r\n输出结果为：\r\n```shell\r\nget data: 42\r\nconsole log data:42\r\nset data to : 42\r\nget data: 2\r\nconsole log data again:2\r\norginal data:2\r\n```\r\n\r\n可以看到，在对data的`value`这个字段进行访问的时候，会自动调用前面定义的getter方法，而当对这个字段进行赋值的时候，会调用前面设置的setter方法，而我们无论是调用setter还是getter的时候，我们都不是直接操作value变量，而是通过defineProperty来间接的访问","2. 从哪开始读vue源码？\r\n\r\n新手读vue源码往往是从`src/core/index.js`开始读起，贴一下`index.js`源码\r\n\r\n```javascript\r\nimport Vue from './instance/index'\r\nimport { initGlobalAPI } from './global-api/index'\r\nimport { isServerRendering } from 'core/util/env'\r\nimport { FunctionalRenderContext } from 'core/vdom/create-functional-component'\r\n\r\ninitGlobalAPI(Vue)\r\n\r\nObject.defineProperty(Vue.prototype, '$isServer', {\r\n  get: isServerRendering\r\n})\r\n\r\nObject.defineProperty(Vue.prototype, '$ssrContext', {\r\n  get () {\r\n    /* istanbul ignore next */\r\n    return this.$vnode && this.$vnode.ssrContext\r\n  }\r\n})\r\n\r\n// expose FunctionalRenderContext for ssr runtime helper installation\r\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\r\n  value: FunctionalRenderContext\r\n})\r\n\r\nVue.version = '__VERSION__'\r\n\r\nexport default Vue\r\n```\r\n这里的核心是从`instance/index.js`中引入Vue和`initGlobalApi`，剩下的是服务端ssr渲染的一些东西，不是我们关注的重点\r\n\r\n其中initGloablApi是对应Vue文档里面的全局Api，也就是这些\r\n\r\n![2021-09-10_14-12](https://user-images.githubusercontent.com/57695072/132808214-b66bbd1d-eac6-4342-99b8-4b0dd5bcea4e.png)\r\n","3. 接下来从`src/instance/index.js`开始切入，这里贴一下源码\r\n\r\n```javascript\r\n\r\nimport { initMixin } from './init'\r\nimport { stateMixin } from './state'\r\nimport { renderMixin } from './render'\r\nimport { eventsMixin } from './events'\r\nimport { lifecycleMixin } from './lifecycle'\r\nimport { warn } from '../util/index'\r\n\r\nfunction Vue (options) {\r\n  if (process.env.NODE_ENV !== 'production' &&\r\n    !(this instanceof Vue)\r\n  ) {\r\n    warn('Vue is a constructor and should be called with the `new` keyword')\r\n  }\r\n  this._init(options)\r\n}\r\n\r\ninitMixin(Vue)\r\nstateMixin(Vue)\r\neventsMixin(Vue)\r\nlifecycleMixin(Vue)\r\nrenderMixin(Vue)\r\n\r\nexport default Vue\r\n```\r\n\r\n这里面引用和使用了各种mixin函数给Vue这个Object添加一些事件，生命周期和属性等\r\n\r\n这里initMixin其中最重要的是给Vue添加了一个`_init`方法，这个方法里面初始化了各种生命周期，event，prop，hook(beforecreated, created, mount等)等\r\n\r\n\r\n\r\n"]}